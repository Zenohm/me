import { S as SvelteComponentDev, i as init, s as safe_not_equal, a as space, e as element, t as text, c as claim_text, b as claim_element, d as children, f as detach, g as add_location, h as insert, j as append, k as set_data, n as noop, l as destroy_each } from './client.1c9a57af.js';

/* src/routes/blog/index.svelte generated by Svelte v3.4.4 */

const file = "src/routes/blog/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.post = list[i];
	child_ctx.index = i;
	return child_ctx;
}

// (39:4) {#if index}
function create_if_block(ctx) {
	var hr;

	return {
		c: function create() {
			hr = element("hr");
			this.h();
		},

		l: function claim(nodes) {
			hr = claim_element(nodes, "HR", { class: true }, false);
			var hr_nodes = children(hr);

			hr_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			hr.className = "svelte-ffk8g2";
			add_location(hr, file, 39, 6, 638);
		},

		m: function mount(target, anchor) {
			insert(target, hr, anchor);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(hr);
			}
		}
	};
}

// (38:2) {#each posts as post, index}
function create_each_block(ctx) {
	var t0, div1, h2, a, t1_value = ctx.post.title, t1, a_href_value, t2, p, t3_value = ctx.post.excerpt, t3, t4, div0, span, t5, t6_value = ctx.post.printDate, t6, t7;

	var if_block = (ctx.index) && create_if_block();

	return {
		c: function create() {
			if (if_block) if_block.c();
			t0 = space();
			div1 = element("div");
			h2 = element("h2");
			a = element("a");
			t1 = text(t1_value);
			t2 = space();
			p = element("p");
			t3 = text(t3_value);
			t4 = space();
			div0 = element("div");
			span = element("span");
			t5 = text("— ");
			t6 = text(t6_value);
			t7 = space();
			this.h();
		},

		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			t0 = claim_text(nodes, "\n    ");

			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			h2 = claim_element(div1_nodes, "H2", { class: true }, false);
			var h2_nodes = children(h2);

			a = claim_element(h2_nodes, "A", { rel: true, href: true }, false);
			var a_nodes = children(a);

			t1 = claim_text(a_nodes, t1_value);
			a_nodes.forEach(detach);
			h2_nodes.forEach(detach);
			t2 = claim_text(div1_nodes, "\n      ");

			p = claim_element(div1_nodes, "P", {}, false);
			var p_nodes = children(p);

			t3 = claim_text(p_nodes, t3_value);
			p_nodes.forEach(detach);
			t4 = claim_text(div1_nodes, "\n      ");

			div0 = claim_element(div1_nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			span = claim_element(div0_nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t5 = claim_text(span_nodes, "— ");
			t6 = claim_text(span_nodes, t6_value);
			span_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t7 = claim_text(div1_nodes, "\n    ");
			div1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			a.rel = "prefetch";
			a.href = a_href_value = "blog/" + ctx.post.slug;
			add_location(a, file, 43, 8, 702);
			h2.className = "svelte-ffk8g2";
			add_location(h2, file, 42, 6, 689);
			add_location(p, file, 45, 6, 779);
			span.className = "post-item-date svelte-ffk8g2";
			add_location(span, file, 47, 8, 846);
			div0.className = "post-item-footer svelte-ffk8g2";
			add_location(div0, file, 46, 6, 807);
			div1.className = "post-item";
			add_location(div1, file, 41, 4, 659);
		},

		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, h2);
			append(h2, a);
			append(a, t1);
			append(div1, t2);
			append(div1, p);
			append(p, t3);
			append(div1, t4);
			append(div1, div0);
			append(div0, span);
			append(span, t5);
			append(span, t6);
			append(div1, t7);
		},

		p: function update(changed, ctx) {
			if (ctx.index) {
				if (!if_block) {
					if_block = create_if_block();
					if_block.c();
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if ((changed.posts) && t1_value !== (t1_value = ctx.post.title)) {
				set_data(t1, t1_value);
			}

			if ((changed.posts) && a_href_value !== (a_href_value = "blog/" + ctx.post.slug)) {
				a.href = a_href_value;
			}

			if ((changed.posts) && t3_value !== (t3_value = ctx.post.excerpt)) {
				set_data(t3, t3_value);
			}

			if ((changed.posts) && t6_value !== (t6_value = ctx.post.printDate)) {
				set_data(t6, t6_value);
			}
		},

		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach(t0);
				detach(div1);
			}
		}
	};
}

function create_fragment(ctx) {
	var t0, div, h1, t1, t2;

	var each_value = ctx.posts;

	var each_blocks = [];

	for (var i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c: function create() {
			t0 = space();
			div = element("div");
			h1 = element("h1");
			t1 = text("Blog");
			t2 = space();

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\n\n");

			div = claim_element(nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			h1 = claim_element(div_nodes, "H1", {}, false);
			var h1_nodes = children(h1);

			t1 = claim_text(h1_nodes, "Blog");
			h1_nodes.forEach(detach);
			t2 = claim_text(div_nodes, "\n  ");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			document.title = "Blog";
			add_location(h1, file, 36, 2, 571);
			div.className = "container";
			add_location(div, file, 35, 0, 545);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, div, anchor);
			append(div, h1);
			append(h1, t1);
			append(div, t2);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},

		p: function update(changed, ctx) {
			if (changed.posts) {
				each_value = ctx.posts;

				for (var i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}
		},

		i: noop,
		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(div);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

function preload({ params, query }) {
  return this.fetch(`blog.json`).then(r => r.json()).then(posts => {
    return { posts };
  });
}

function instance($$self, $$props, $$invalidate) {
	let { posts } = $$props;

	const writable_props = ['posts'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Index> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('posts' in $$props) $$invalidate('posts', posts = $$props.posts);
	};

	return { posts };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["posts"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.posts === undefined && !('posts' in props)) {
			console.warn("<Index> was created without expected prop 'posts'");
		}
	}

	get posts() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Index;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNjkwYjAyNTYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYmxvZy9pbmRleC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG4gIGV4cG9ydCBmdW5jdGlvbiBwcmVsb2FkKHsgcGFyYW1zLCBxdWVyeSB9KSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goYGJsb2cuanNvbmApLnRoZW4ociA9PiByLmpzb24oKSkudGhlbihwb3N0cyA9PiB7XG4gICAgICByZXR1cm4geyBwb3N0cyB9O1xuICAgIH0pO1xuICB9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cbiAgZXhwb3J0IGxldCBwb3N0cztcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIGgyLFxuICAucG9zdC1pdGVtLWZvb3RlciB7XG4gICAgZm9udC1mYW1pbHk6IFJ1YmlrLCBzYW5zLXNlcmlmO1xuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIH1cblxuICAucG9zdC1pdGVtLWRhdGUge1xuICAgIGNvbG9yOiAjQUFBO1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gIH1cblxuICBociB7XG4gICAgbWFyZ2luOiA2MHB4IGF1dG87XG4gIH1cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPkJsb2c8L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cblxuPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICA8aDE+QmxvZzwvaDE+XG4gIHsjZWFjaCBwb3N0cyBhcyBwb3N0LCBpbmRleH1cbiAgICB7I2lmIGluZGV4fVxuICAgICAgPGhyIC8+XG4gICAgey9pZn1cbiAgICA8ZGl2IGNsYXNzPVwicG9zdC1pdGVtXCI+XG4gICAgICA8aDI+XG4gICAgICAgIDxhIHJlbD0ncHJlZmV0Y2gnIGhyZWY9J2Jsb2cve3Bvc3Quc2x1Z30nPntwb3N0LnRpdGxlfTwvYT5cbiAgICAgIDwvaDI+XG4gICAgICA8cD57cG9zdC5leGNlcnB0fTwvcD5cbiAgICAgIDxkaXYgY2xhc3M9XCJwb3N0LWl0ZW0tZm9vdGVyXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwicG9zdC1pdGVtLWRhdGVcIj7igJQge3Bvc3QucHJpbnREYXRlfTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB7L2VhY2h9XG48L2Rpdj5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQ0EyQ21ELElBQUksQ0FBQyxLQUFLLDBDQUVuRCxJQUFJLENBQUMsT0FBTyx5Q0FFa0IsSUFBSSxDQUFDLFNBQVM7O3FCQVQ3QyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lDQUt3QixJQUFJLENBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FMdEMsS0FBSzs7Ozs7Ozs7Ozs7dURBS3FDLElBQUksQ0FBQyxLQUFLOzs7O3lFQUF2QixJQUFJLENBQUMsSUFBSTs7Ozt1REFFckMsSUFBSSxDQUFDLE9BQU87Ozs7dURBRWtCLElBQUksQ0FBQyxTQUFTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NCQVY3QyxLQUFLOzs7O2dDQUFWOzs7Ozs7Ozs7Ozs7bUNBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUNBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUNBQUE7Ozs7Ozs7cUJBQUssS0FBSzs7bUNBQVY7Ozs7Ozs7Ozs7OzsyQkFBQTs7O2dCQUFBLG9CQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFwQ0ssU0FBUyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7QUFDN0MsRUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSTtBQUNuRSxJQUFJLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUN2QixHQUFLLENBQUMsQ0FBQztBQUNMLENBQUM7OztDQUlNLE1BQUksaUJBQUssQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
